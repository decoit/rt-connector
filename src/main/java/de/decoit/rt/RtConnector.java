/* 
 * Copyright (C) 2015 DECOIT GmbH
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package de.decoit.rt;

import de.decoit.rt.model.RtTicket;
import de.decoit.rt.model.RtQueue;
import de.decoit.rt.model.RtTicketHistoryItem;
import de.decoit.rt.model.RtUser;
import java.util.List;
import java.util.Map;


/**
 * This interface defines all methods a RT connector must implement.
 * As data structures for return values it uses the classes defined in the de.decoit.rt.model package.
 *
 * @author Thomas Rix (rix@decoit.de)
 */
public interface RtConnector {
	/**
	 * Login into RT with the specified credentials.
	 *
	 * @param uname RT username
	 * @param password Password for username
	 * @return RT session ID
	 * @throws RtException
	 */
	public String login(String uname, String password) throws RtException;


	/**
	 * Logout from RT
	 *
	 * @param sessionId ID of the session if log out
	 * @throws RtException
	 */
	public void logout(String sessionId) throws RtException;


	/**
	 * Get the ticket with ID id from RT.
	 *
	 * @param sessionId Current session ID, must be valid
	 * @param id Ticket ID
	 * @return Object of the ticket
	 *
	 * @throws RtException
	 */
	public RtTicket getTicket(String sessionId, long id) throws RtException;


	/**
	 * Search for tickets matching the provided query string.
	 * The results are ordered by creation time, with newest ticket first.
	 *
	 * @param sessionId Current session ID, must be valid
	 * @param query Search query, using the language generated by the RT query builder
	 * @return A list of tickets matching the query
	 *
	 * @throws RtException
	 */
	public List<RtTicket> searchTickets(String sessionId, String query) throws RtException;


	/**
	 * Search for tickets matching the provided query string and ordering them using the provided custom ordering.
	 *
	 * @param sessionId Current session ID, must be valid
	 * @param query   Search query, using the language generated by the RT query builder
	 * @param orderby Field and direction for ordering the results, using the language generated by the RT query builder
	 * @return A list of tickets matching the query
	 *
	 * @throws RtException
	 */
	public List<RtTicket> searchTickets(String sessionId, String query, String orderby) throws RtException;


	/**
	 * Create a ticket in RT from a ticket object and return the ID of the new ticket.
	 *
	 * @param sessionId Current session ID, must be valid
	 * @param ticket Object holding information about the new ticket
	 * @return The ID of the newly created ticket
	 *
	 * @throws RtException if the ticket creation failed
	 */
	public long createTicket(String sessionId, RtTicket ticket) throws RtException;


	/**
	 * Update an existing ticket in RT with new information.
	 * The provided ticket object must have a valid ticket ID, otherwise the request will fail.
	 *
	 * @param sessionId Current session ID, must be valid
	 * @param ticket Ticket object with the updated information
	 * @return true if the changes were successfully written
	 * @throws RtException if the edit action failed
	 */
	public boolean editTicket(String sessionId, RtTicket ticket) throws RtException;


	/**
	 * Get a list of the history items stored by RT for the ticket with the provided ID.
	 *
	 * @param sessionId Current session ID, must be valid
	 * @param ticketId Ticket of which the history shall be returned
	 * @return A ordered list of history items
	 * @throws RtException if the list history failed
	 */
	public List<RtTicketHistoryItem> getTicketHistory(String sessionId, long ticketId) throws RtException;


	/**
	 * Add a comment to an existing ticket in RT.
	 * The history item to write must be of type COMMENT to use this method.
	 *
	 * @param sessionId Current session ID, must be valid
	 * @param ticketId Ticket which shall be commented
	 * @param item   Comment which will be written
	 * @return true if the comment was successfully written
	 *
	 * @throws RtException if the comment action failed
	 */
	public boolean commentTicket(String sessionId, long ticketId, RtTicketHistoryItem item) throws RtException;


	/**
	 * Add an answer to an existing ticket in RT.
	 * The history item to write must be of type CORRESPOND to use this method.
	 *
	 * @param sessionId Current session ID, must be valid
	 * @param ticketId Ticket which shall be answered
	 * @param item   Answer which will be written
	 * @return true if the answer was successfully written
	 *
	 * @throws RtException if the answer action failed
	 */
	public boolean answerTicket(String sessionId, long ticketId, RtTicketHistoryItem item) throws RtException;


	/**
	 * Get the RT queue with the provided ID.
	 *
	 * @param sessionId Current session ID, must be valid
	 * @param id ID of the requested RT queue
	 * @return A queue object containing queue information
	 * @throws RtException
	 */
	public RtQueue getQueue(String sessionId, long id) throws RtException;


	/**
	 * Get the RT queue with the provided name.
	 *
	 * @param sessionId Current session ID, must be valid
	 * @param name Name of the requested RT queue
	 * @return A queue object containing queue information
	 * @throws RtException
	 */
	public RtQueue getQueueByName(String sessionId, String name) throws RtException;


	/**
	 * List all queues which are defined in RT.
	 *
	 * @param sessionId Current session ID, must be valid
	 * @return A map with queueId=&gt;queueName mappings
	 * @throws RtException
	 */
	public Map<Long, String> listQueues(String sessionId) throws RtException;


	/**
	 * Create a new queue in RT with the provided information.
	 * A queue ID defined by the object will be ignored.
	 *
	 * @param sessionId Current session ID, must be valid
	 * @param queue A queue object filled with information for the new queue.
	 * @return The queue ID of the newly created queue
	 * @throws RtException
	 */
	public long createQueue(String sessionId, RtQueue queue) throws RtException;


	/**
	 * Get information about a specific user.
	 * The returned information does not contain the user's password.
	 *
	 * @param sessionId Current session ID, must be valid
	 * @param uname Username of the requested user
	 * @return User object containing the user information
	 * @throws RtException
	 */
	public RtUser getUser(String sessionId, String uname) throws RtException;


	/**
	 * Get information about a specific user.
	 * The returned information does not contain the user's password.
	 *
	 * @param sessionId Current session ID, must be valid
	 * @param uid User ID of the requested user
	 * @return User object containing the user information
	 * @throws RtException
	 */
	public RtUser getUser(String sessionId, long uid) throws RtException;


	/**
	 * Search for users matching the provided query string and ordering them using the provided custom ordering.
	 *
	 * @param sessionId Current session ID, must be valid
	 * @param query   Search query, using the language generated by the RT query builder
	 * @param orderby Field and direction for ordering the results, using the language generated by the RT query builder
	 * @return A list of users matching the query
	 *
	 * @throws RtException
	 */
	public List<RtUser> searchUsers(String sessionId, String query, String orderby) throws RtException;


	/**
	 * Update an existing user with new information.
	 *
	 * @param sessionId Current session ID, must be valid
	 * @param user User object with the updated information
	 * @return true if the changes were successfully written
	 * @throws RtException if the edit action failed
	 */
	public boolean editUser(String sessionId, RtUser user) throws RtException;
}
